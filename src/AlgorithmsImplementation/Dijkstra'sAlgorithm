#include <iostream>
#include <vector>
#include <limits.h>

const int V = 6;  // Number of vertices

// Function to find the vertex with the minimum distance value, from the set of vertices not yet included in the shortest path tree
int minDistance(const std::vector<int>& dist, const std::vector<bool>& sptSet) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; ++v) {
        if (!sptSet[v] && dist[v] < min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to print the constructed distance array
void printSolution(const std::vector<int>& dist) {
    std::cout << "Vertex \t Distance from Source\n";
    for (int i = 0; i < V; ++i)
        std::cout << i << "\t\t" << dist[i] << "\n";
}

// Dijkstra's algorithm to find the shortest paths from source to all other vertices
void dijkstra(const std::vector<std::vector<int>>& graph, int src) {
    std::vector<int> dist(V, INT_MAX);  // Output array to store the shortest distance from the source to each vertex
    std::vector<bool> sptSet(V, false);  // Set to true if the vertex is included in the shortest path tree

    dist[src] = 0;  // Distance from the source vertex to itself is always 0

    for (int count = 0; count < V - 1; ++count) {
        int u = minDistance(dist, sptSet);  // Pick the minimum distance vertex from the set of vertices not yet processed
        sptSet[u] = true;  // Mark the picked vertex as processed

        // Update the distance value of adjacent vertices
        for (int v = 0; v < V; ++v) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
        }
    }

    // Print the constructed distance array
    printSolution(dist);
}

int main() {
    std::vector<std::vector<int>> graph = {
        {0, 2, 0, 0, 0, 0},
        {0, 0, 3, 0, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 2},
        {0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0}
    };

    int source = 0;  // Source vertex

    std::cout << "Shortest distances from vertex " << source << ":\n";
    dijkstra(graph, source);

    return 0;
}
